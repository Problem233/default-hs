module ProjectEuler where

-- Used by answer2_2
import Data.List

-- Problem 1: Mutiple of 3 and 5
-- --
-- If we list all the natural numbers below 10 that are
-- multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these
-- multiples is 23.
-- Find the sum of all the multiples of 3 or 5 below 1000.
-- --
-- Answer: 233168

-- answer1_1: O(1)
answer1_1 :: Integer
answer1_1 = sum' 3 + sum' 5 - sum' 15
  where numberOfItem limit x = limit `quot` x
        sum limit x = (x + noi * x) * noi `quot` 2
          where noi = numberOfItem limit x
        sum' = sum (1000 - 1)

-- answer1_2: O(n)
answer1_2 :: Integer
answer1_2 =
  sum [3, 6..999] + sum [5, 10..999] - sum [15, 30..999]

-- answer1_3: O(n)
answer1_3 :: Integer
answer1_3 = sum $
  filter (\x -> x `rem` 3 == 0 || x `rem` 5 == 0) [1..999]

-- Problem 2: Even Fibonacci numbers
-- --
-- Each new term in the Fibonacci sequence is generated by
-- adding the previous two terms. By starting with 1 and 2, the
-- first 10 terms will be:
--   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
-- By considering the terms in the Fibonacci sequence whose
-- values do not exceed four million, find the sum of the even-
-- valued terms.
-- --
-- Answer: 4613732

-- answer2_1: O(n)
answer2_1 :: Integer
answer2_1 = loop 0 1 2
  where loop sum a b
          | a <= 4000000 =
              loop (sum + if even a then a else 0) b (a + b)
          | otherwise = sum

-- answer2_2: O(n)
answer2_2 :: Integer
answer2_2 =
  sum $ filter even (takeWhile (<= 4000000) $ fib 1 2)
  where fib a b = a : fib b (a + b)

-- Problem 3: Largest prime factor
-- --
-- The prime factors of 13195 are 5, 7, 13 and 29.
-- What is the largest prime factor of the number
-- 600851475143 ?
-- --
-- Answer: 6857

-- answer3_1: O(n)
-- BUG 算法有问题，但结果正确
--     正确算法速度超慢，所以这里将就着用吧
answer3_1 :: Integer
answer3_1 = find num 2 2
  where num = 600851475143
        index = floor $ sqrt $ fromInteger num
        find x f r
          | f > index = r
          | x `rem` f == 0 = find (x `quot` f) (f + 1) f
          | otherwise = find x (f + 1) r

-- Problem 4: Largest palindrome product
-- --
-- A palindromic number reads the same both ways. The largest
-- palindrome made from the product of two 2-digit numbers is
-- 9009 = 91 × 99.
-- Find the largest palindrome made from the product of two
-- 3-digit numbers.
-- --
-- Answer: ???

-- answer4_1: O(10^n)
answer4_1 :: Integer
answer4_1 = foldl max 0 $
            filter (\xs -> reverse (show xs) == show xs)
                   [x * y | x <- reverse [100..999],
                            y <- reverse [100..x]]
